import io
import os
import uuid
import time
import json
import openai
import random
import string
import hashlib
import logging
import tiktoken

from datetime import datetime, timedelta

import requests
import threading
import traceback
from flask import Flask, request
from yookassa import Configuration, Payment

from firebase_admin import credentials, initialize_app, db

import telegram
from telegram import Bot
from telegram.utils.helpers import mention_html
from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler
from telegram import Voice, Audio


#import soundfile as sf
#from transformers import Wav2Vec2ForCTC, Wav2Vec2Tokenizer
#import torch

#logging.basicConfig(level=logging.DEBUG)

app = Flask(__name__)


# –¢–æ–∫–µ–Ω—ã
#TELEGRAM_BOT_TOKEN = "578131:AAFFcu7ekjO8i65j0"  # –¢–µ—Å—Ç–æ–≤—ã–π
TELEGRAM_BOT_TOKEN = "62485953:AAFR9gekEA8Nr9Ao" #–†–∞–±–æ—á–∏–π
bot2 = Bot(token=TELEGRAM_BOT_TOKEN)
cred = credentials.Certificate("telegabot-16d96-firvsi1b-ae3594244d.json")
initialize_app(cred, {'databaseURL': 'https://telegabot-16d96-defrope-west1.firebasedatabase.app/'})


#Openai —Ç–æ–∫–µ–Ω—ã
OPENAI_API_KEY = "sk-I2DnbmALAFBqqlQ5MzlDshc8cB"
openai.api_key = OPENAI_API_KEY


#–ÆKassa —Ç–æ–∫–µ–Ω—ã
SECRET_KEY = "live_MRRA6IBEnh0PA160XnqS6tq8mKkvh8IG2OQ8fNPhZ-Q"
Configuration.account_id = "312066"
Configuration.secret_key = SECRET_KEY


#–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —Ç–æ–∫–µ–Ω—ã
#model = Wav2Vec2ForCTC.from_pretrained("jonatasgrosman/wav2vec2-large-xlsr-53-russian")
#tokenizer = Wav2Vec2Tokenizer.from_pretrained("jonatasgrosman/wav2vec2-large-xlsr-53-russian")


typing_messages = [
    "ChatGPT –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–≤–µ—Ä—Ö—Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞–Ω–∏—è... ü§ñ",
    "–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –≤–µ–ª–∏–∫–æ–º—É –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É... üí°",
    "–ò—â—É –æ—Ç–≤–µ—Ç –≤ –≥–ª—É–±–∏–Ω–∞—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞... üåê",
    "–í–∑–ª–∞–º—ã–≤–∞—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∏–∏... üìö",
    "–°–∫–∞–Ω–∏—Ä—É—é –≤—Å–µ –∫–Ω–∏–≥–∏ –º–∏—Ä–∞... üìñ",
    "–°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ –≤—Å–µ–π –ì–∞–ª–∞–∫—Ç–∏–∫–∏... üåå",
    "–®–∏—Ñ—Ä—É—é –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –µ–≥–æ –Ω–µ —É–∫—Ä–∞–ª–∏... üîí",
    "–í–∞—à –≤–æ–ø—Ä–æ—Å —Å—Ç–æ–∏—Ç –º–∏–ª–ª–∏–æ–Ω... üí∞",
    "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤... üß†",
    "–°–æ–±–∏—Ä–∞—é –∫–æ–º–∞–Ω–¥—É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞... üë©‚Äçüî¨üë®‚Äçüî¨",
    "–ó–∞–≥—Ä—É–∂–∞—é –∫—Ä–∏—Å—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π —à–∞—Ä –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π... üîÆ",
    "–ò—â—É –º—É–¥—Ä–æ—Å—Ç—å –≤ –ø—É—Å—Ç—ã–Ω–µ –ì–æ–±–∏... üèúÔ∏è",
    "–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å –≤–æ–ª—à–µ–±–Ω—ã–º–∏ —Å—É—â–µ—Å—Ç–≤–∞–º–∏... üßö",
    "–ó–∞–¥–∞—é –≤–æ–ø—Ä–æ—Å —Å–∞–º–æ–º—É —Å–µ–±–µ –≤ –ø—Ä–æ—à–ª–æ–º... üï∞Ô∏è",
    "–ß–∏—Ç–∞—é –º—ã—Å–ª–∏ –∑–Ω–∞–º–µ–Ω–∏—Ç—ã—Ö —É—á–µ–Ω—ã—Ö... üß™",
    "–ü—Ä–æ–∫–∞—á–∏–≤–∞—é –º–æ–∑–≥ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è... üéÆ",
    "–ü–µ—Ä–µ–≥—Ä—É–∂–∞—é—Å—å –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å... üöÄ",
    "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–º –∑–Ω–∞–Ω–∏—è–º –ê—Ç–ª–∞–Ω—Ç–∏–¥—ã... üåä",
    "–û–±—É—á–∞—é—Å—å —Ç–µ–ª–µ–ø–∞—Ç–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞... ‚öõÔ∏è",
    "–ü—Ä–æ–≤–µ—Ä—è—é –≤–µ—Å—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∑–∞ —Å–µ–∫—É–Ω–¥—É... ‚è±Ô∏è",
    "–°–æ–±–∏—Ä–∞—é –∫—É–±–∏–∫ –†—É–±–∏–∫–∞ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è... üß©",
    "–°–æ–≤–µ—Ç—É—é—Å—å —Å –º—É–¥—Ä—ã–º–∏ —Å–æ–≤–∞–º–∏ –ì–æ–≥–≤–∞—Ä—Ç—Å–∞... ü¶â",
    "–ó–∞–≥–∞–¥—ã–≤–∞—é –≤–æ–ø—Ä–æ—Å –Ω–∞ –∫–æ—Ñ–µ–π–Ω–æ–π –≥—É—â–µ... ‚òï",
    "–û–±—Ä–∞—â–∞—é—Å—å –∫ –î–∂–∏–Ω–Ω—É –∏–∑ –≤–æ–ª—à–µ–±–Ω–æ–π –ª–∞–º–ø—ã... üßû",
    "–ò—Å–ø–æ–ª—å–∑—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–∞—à–∏–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞... ‚è≥",
    "–ê–∫—Ç–∏–≤–∏—Ä—É—é —Ä–µ–∂–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏... üëÅÔ∏è",
    "–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º–∏ —á–µ—Ä–µ–ø–∞—à–∫–∞–º–∏-–Ω–∏–Ω–¥–∑—è... üê¢",
    "–ü—Ä–æ–≤–µ—Ä—è—é –∑–Ω–∞–Ω–∏—è —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏... üßô",
    "–ü–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞—é –≤—Å–µ —ç–ø–∏–∑–æ–¥—ã '–†–∏–∫–∞ –∏ –ú–æ—Ä—Ç–∏' –∑–∞ –æ—Ç–≤–µ—Ç–∞–º–∏... üì∫",
    "–ò—Å–ø–æ–ª—å–∑—É—é –¥–µ—Ç–µ–∫—Ç–æ—Ä –ª–∂–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤... üïµÔ∏è",
    "–ü—Ä–∏–≥–ª–∞—à–∞—é –∫—Ä—É—Ç–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–∏–≤–∞ –¥–ª—è —Ä–∞–∑–≥–∞–¥–∫–∏ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞... üé©",
    "–ó–∞–¥–∞—é –≤–æ–ø—Ä–æ—Å –≤—Å–µ–º–∏—Ä–Ω–æ–π –ø–∞—É—Ç–∏–Ω–µ –º—É–¥—Ä–µ—Ü–æ–≤... üï∏Ô∏è",
    "–ò—Å–ø–æ–ª—å–∑—É—é –¥—Ä–µ–≤–Ω–µ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞... üÄÑ",
    "–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –º—É–¥—Ä–æ—Å—Ç—å —Å –≤–µ—Ä—à–∏–Ω—ã –≥–æ—Ä—ã... üèîÔ∏è",
    "–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å –¥–µ–ª—å—Ñ–∏–Ω–∞–º–∏-–≥–µ–Ω–∏—è–º–∏... üê¨",
    "–ü—Ä–æ–≤–æ–∂—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º –º–∏—Ä–µ... üåç",
    "–°–æ–≤–µ—Ä—à–∞—é –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞... üïó",
    "–ü—Ä–æ—à—É –º—É–¥—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ü–∞ –∏–∑ –¥–µ—Ä–µ–≤–Ω–∏ –∑–Ω–∞–Ω–∏–π... üßì",
    "–ò—Å–ø–æ–ª—å–∑—É—é –º–∞–≥–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–∞—Å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –æ—Ç–≤–µ—Ç—É... üß≠",
    "–ó–∞–≥–∞–¥—ã–≤–∞—é –≤–æ–ø—Ä–æ—Å –¥—Ä–µ–≤–Ω–µ–º—É –¥—Ä–∞–∫–æ–Ω—É... üêâ",
    "–°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Ç—ã—Å—è—á–∏ –ø–ª–∞–Ω–µ—Ç... ü™ê",
    "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é –≤—Å–µ –∑–Ω–∞–Ω–∏—è –•–æ–≥–≤–∞—Ä—Ç—Å–∞... üè∞",
    "–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å –æ—Ä–∞–∫—É–ª–æ–º –î–µ–ª—å—Ñ–∏... üè∫",
    "–ò—Å–ø–æ–ª—å–∑—É—é –º–µ—Ç–æ–¥—ã –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞... üîç",
    "–ü—Ä–∏–≥–ª–∞—à–∞—é –∫–æ–º–∞–Ω–¥—É —Å—É–ø–µ—Ä–≥–µ—Ä–æ–µ–≤ –¥–ª—è —Å–æ–≤–µ—Ç–∞... ü¶∏",
    "–°–ª—É—à–∞—é —à–µ–ø–æ—Ç –¥–µ—Ä–µ–≤—å–µ–≤ –º—É–¥—Ä–æ—Å—Ç–∏... üå≥",
    "–í–∑–ª–∞–º—ã–≤–∞—é –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∞–≤–¥—ã... üíª",
    "–ê–∫—Ç–∏–≤–∏—Ä—É—é –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∑–Ω–∞–Ω–∏–π... üåé",
    "–ó–∞–≥–∞–¥—ã–≤–∞—é –≤–æ–ø—Ä–æ—Å –•–∞—Ç—Ç–æ—Ä–∏ –•–∞–Ω–∑–æ –∏–∑ '–ö–∏–ª–ª –ë–∏–ª–ª'... ‚öîÔ∏è",
    "–û–±—Ä–∞—â–∞—é—Å—å –∫ –¢–æ–Ω–∏ –°—Ç–∞—Ä–∫—É –∑–∞ –Ω–∞—É—á–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏... ü¶æ",
    "–ü–æ–ª—É—á–∞—é –ø–æ–º–æ—â—å –æ—Ç –≥–µ—Ä–æ–µ–≤ '–ú—Å—Ç–∏—Ç–µ–ª–µ–π'... ü¶∏",
    "–ü—Ä–æ–≤–æ–∂—É –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–µ —Å '–¢–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä–æ–º'... ü§ñ",
    "–°–ø—Ä–∞—à–∏–≤–∞—é –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–∑–µ–Ω –∏–∑ '–ö—É–Ω–≥-—Ñ—É –ø–∞–Ω–¥—ã'... üêº",
    "–°–æ–±–∏—Ä–∞—é –∑–Ω–∞–Ω–∏—è —Å '–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞–º–∏'... üöõ",
    "–°–æ–≤–µ—Ç—É—é—Å—å —Å –≥–µ—Ä–æ—è–º–∏ '–®–µ—Å—Ç–æ–≥–æ —á—É–≤—Å—Ç–≤–∞'... üëª",
    "–ó–∞–≥–∞–¥—ã–≤–∞—é –≤–æ–ø—Ä–æ—Å –ë—Ä—é—Å—É –£—ç–π–Ω—É –∏–∑ '–ë—ç—Ç–º–µ–Ω–∞'... ü¶á",
    "–û–±—Ä–∞—â–∞—é—Å—å –∫ –®–µ—Ä–ª–æ–∫—É –•–æ–ª–º—Å—É –∑–∞ —Å–æ–≤–µ—Ç–æ–º... üîé",
    "–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å –≥–µ—Ä–æ—è–º–∏ '–ü–∏—Ä–∞—Ç–æ–≤ –ö–∞—Ä–∏–±—Å–∫–æ–≥–æ –º–æ—Ä—è'... ‚ò†Ô∏è",
    "–û–±—Ä–∞—â–∞—é—Å—å –∫ –º–∞—Å—Ç–µ—Ä—É –ô–æ–¥–µ –∏–∑ '–ó–≤–µ–∑–¥–Ω—ã—Ö –≤–æ–π–Ω'... üü¢",
    "–°–ø—Ä–∞—à–∏–≤–∞—é –≥–µ—Ä–æ–µ–≤ '–û—É—à–µ–Ω–∞' –∑–∞ –∏–¥–µ–∏... üíé",
    "–ó–∞–≥–∞–¥—ã–≤–∞—é –≤–æ–ø—Ä–æ—Å –õ–µ–æ–Ω—É –∏–∑ '–õ–µ–æ–Ω: –ó–∞–≤–æ–¥–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª'... üåø",
    "–ò—â—É –∑–Ω–∞–Ω–∏—è —É –≥–µ—Ä–æ–µ–≤ '–ú–∞—Ç—Ä–∏—Ü—ã'... üï¥Ô∏è",
    "–û–±—Ä–∞—â–∞—é—Å—å –∫ '–ó–≤–µ–∑–¥–Ω–æ–º—É –ª–æ—Ä–¥—É' –∑–∞ –ø–æ–º–æ—â—å—é... üöÄ",
    "–°–æ–≤–µ—Ç—É—é—Å—å —Å '–≠–ª–ª–∏–æ—Ç–æ–º' –∏–∑ '–ò–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∏–Ω–∞'... üö≤",
    "–ó–∞–≥–∞–¥—ã–≤–∞—é –≤–æ–ø—Ä–æ—Å –∞–≥–µ–Ω—Ç–∞–º '–ú–µ–Ω in Black'... üï∂Ô∏è",
]


# –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–∫–∏ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª—É—á–∞—è
week_messages = [
    "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –Ω–µ–¥–µ–ª—å–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–æ—Ç—É üåà",
    "–£—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ! –í–∞—à–∞ –Ω–µ–¥–µ–ª—è —Å –±–æ—Ç–æ–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üéØ",
    "–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω! –¶–µ–ª–∞—è –Ω–µ–¥–µ–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤–ø–µ—Ä–µ–¥–∏ üèÅ",
    "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ù–µ–¥–µ–ª—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å –±–æ—Ç–æ–º –Ω–∞—á–∞–ª–∞—Å—å üéä",
    "–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞! –ù–µ–¥–µ–ª—è –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∂–¥–µ—Ç –≤–∞—Å üåü",
    "–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏ üéâ",
    "–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –Ω–µ–¥–µ–ª–∏ ü•≥",
    "–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –ù–µ–¥–µ–ª—è –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å üöÄ",
]

month_messages = [
    "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—Å –∂–¥–µ—Ç –º–µ—Å—è—Ü –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É üå†",
    "–£—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ! –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –º–µ—Å—è—Ü—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü üéØ",
    "–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω! –í–ø–µ—Ä–µ–¥–∏ –º–µ—Å—è—Ü –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ üèÅ",
    "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ú–µ—Å—è—Ü –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–∞—á–∞–ª—Å—è üéä",
    "–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞! –ú–µ—Å—è—Ü –≤–æ–ª—à–µ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —É–∂–µ –∑–¥–µ—Å—å üåü",
    "–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –í–µ—Å—å –º–µ—Å—è—Ü –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤ –≤–∞—à–µ–º —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–∏ üéä",
    "–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –º–µ—Å—è—Ü–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ üåü",
    "–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –º–µ—Å—è—Ü –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ üéà",
]

year_messages = [
    "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—Å –∂–¥–µ—Ç –≥–æ–¥ –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É üåà",
    "–£—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ! –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –≥–æ–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π üéØ",
    "–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω! –í–ø–µ—Ä–µ–¥–∏ –≥–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ üèÅ",
    "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ì–æ–¥ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–∞—á–∞–ª—Å—è üéä",
    "–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞! –ì–æ–¥ –≤–æ–ª—à–µ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —É–∂–µ –∑–¥–µ—Å—å üåü",
    "–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –ì–æ–¥ –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∂–¥–µ—Ç –≤–∞—Å ü•á",
    "–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂! –í–ø–µ—Ä–µ–¥–∏ —Ü–µ–ª—ã–π –≥–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π üèÜ",
    "–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –≥–æ–¥–æ–º –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ üéâ",
]


# –ó–∞–¥–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
updater = Updater(token=TELEGRAM_BOT_TOKEN)
dispatcher = updater.dispatcher

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üîç"),
            KeyboardButton(text="–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ü§ñ"),
        ],
        [
            KeyboardButton(text="–ú–æ–π –±–∞–ª–∞–Ω—Å GP üí∞"),
            KeyboardButton(text="–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å GP üÜì"),
        ],
        [
            KeyboardButton(text="–ö—É–ø–∏—Ç—å GP üí≥"),
            KeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º üßº"),
        ]
    ],
    resize_keyboard=True
)


#–ö–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
subscription_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üñäÔ∏è", url="https://t.me/NeuroNewsGpt")],
        [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚úÖ", callback_data="check_subscription")]
    ]
)


#------------------------------–í–°–Å –ß–¢–û –°–í–Ø–ó–ê–ù–û –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•------------------------------


def generate_unique_code(user_id):
    return f"{user_id}-{str(uuid.uuid4())[:8]}"


def generate_invite_link(bot_username, unique_code):
    return f"https://t.me/{bot_username}?start={unique_code}"


def add_new_user(user_id):
    unique_code = generate_unique_code(user_id)
    invite_link = generate_invite_link("ChatProGPT_bot", unique_code)
    ref = db.reference(f'users/{user_id}')
    ref.set({
        'gp': 15,
        'subscription': "none",
        'referral_code': invite_link,
        'referal_bro': "none"
    })


def save_subs_date(user_id, code):
    if isinstance(code, datetime):
        code = code.isoformat()
    ref = db.reference(f'users/{user_id}/subscription')
    ref.set(code)


def get_subs_date(user_id):
    ref = db.reference(f'users/{user_id}/subscription')
    code = ref.get()

    if code is None or code == "none":
        return "none"
    else:
        return datetime.fromisoformat(code)


def save_referral_code(user_id, code):
    ref = db.reference(f'users/{user_id}/referral_code')
    ref.set(code)


def get_referral_code(user_id):
    ref = db.reference(f'users/{user_id}/referral_code')
    return ref.get()


def referral_code(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    referral_code = get_referral_code(user_id)
    if referral_code:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"<b>üíé –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ GP - –ø—Ä–æ—Å—Ç–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞—Ç—Ä–∞—Ç!</b>\n\n1. –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ +7GP –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–≤–∞–∂–Ω–æ, –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π —Ç–æ–ª—å–∫–æ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ)üë•\n\n–í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_code}\n\nüå± –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è GP –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å —Å –Ω–∞–º–∏ –∏ –±—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!\n\n",
            parse_mode=telegram.ParseMode.HTML,
            disable_web_page_preview=True)

    else:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ üòî –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ ‚è≥"
        )


def find_inviter_id(unique_code):
    users_ref = db.reference('users')
    users_data = users_ref.get()

    for user_id, user_data in users_data.items():
        referral_link = user_data.get('referral_code')
        if referral_link and unique_code in referral_link:
            return user_id
    return None


def save_inviter_id(user_id, inviter_id):
    ref = db.reference(f'users/{user_id}/inviter_id')
    ref.set(inviter_id)


def get_inviter_id(user_id):
    ref = db.reference(f'users/{user_id}/inviter_id')
    return ref.get()


def delete_inviter_id(user_id):
    ref = db.reference(f'users/{user_id}/inviter_id')
    ref.delete()


def ensure_user_in_db(handler_function):
    def wrapper(update: Update, context: CallbackContext, *args, **kwargs):
        user_id = update.effective_user.id
        if not user_exists(user_id):
            add_new_user(user_id)
        return handler_function(update, context, *args, **kwargs)
    return wrapper


def user_exists(user_id):
    ref = db.reference(f'users/{user_id}')
    return ref.get() is not None


def get_user_data(user_id, field):
    ref = db.reference(f'users/{user_id}/{field}')
    return ref.get()


def set_user_data(user_id, field, value):
    ref = db.reference(f'users/{user_id}/{field}')
    ref.set(value)


def update_user_data(user_id, chat_data, updated_data):
    chat_data[user_id].update(updated_data)


@ensure_user_in_db
def my_data(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    current_subs = get_user_data(user_id, 'subscription')
    current_gp = get_user_data(user_id, 'gp')
    update.message.reply_text(f"<b>üí∞ –£–∑–Ω–∞–π—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏!</b>\n\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:\n{current_gp}GP üíé\n\n–ü–æ–¥–ø–∏—Å–∫–∞:\n{current_subs} ‚è±Ô∏è", parse_mode=telegram.ParseMode.HTML)
    #context.bot.send_message(f"–í–∞—à —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: {current_gp}GP")


#------------------------------START------------------------------


def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name

    if not user_exists(user_id):
        add_new_user(user_id)
        if context.args and len(context.args) == 1:
            print("hello")
            inviter_unique_code = context.args[0]
            inviter_id = find_inviter_id(inviter_unique_code)
            if inviter_id:
                save_inviter_id(user_id, inviter_id)
        if check_subscription(update, context):
            inviter_id = get_inviter_id(user_id)
            if inviter_id:
                # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ 1 GP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª –¥—Ä—É–≥–∞
                current_gp = get_user_data(inviter_id, 'gp')
                set_user_data(inviter_id, 'gp', current_gp + 7)
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª –¥—Ä—É–≥–∞
                friend_link = mention_html(user_id, "–¥—Ä—É–≥")
                context.bot.send_message(
                    chat_id=inviter_id,
                    text=f"–£—Ä–∞! –í–∞—à {friend_link} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ 'ChatGPT | FREE' –∏ –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +7GP! ü•≥",
                    parse_mode=telegram.ParseMode.HTML
                )
                # –£–¥–∞–ª–µ–Ω–∏–µ inviter_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—á–∏—Å–ª—è—Ç—å GP –ø–æ–≤—Ç–æ—Ä–Ω–æ
                delete_inviter_id(user_id)

    context.bot.send_message(chat_id=update.effective_chat.id,
                                 text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! \n\nüåû –Ø ChatGPT, –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç üß†", reply_markup=keyboard)


def handle_features(update: Update, context: CallbackContext):
    message = context.bot.send_message(chat_id=update.effective_chat.id, text=
"<b>üéì –û—Ç–∫—Ä–æ–π—Ç–µ –º–∞–≥–∏—á–µ—Å–∫–∏–π –º–∏—Ä —É—á—ë–±—ã —Å –ø–æ–º–æ—â—å—é ChatGPT:</b>\n\n"
"1Ô∏è‚É£ –†–∞–∑–≥–∞–¥–∞–π—Ç–µ —Ç–∞–π–Ω—ã –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –∏ —Ñ–∏–∑–∏–∫–∏! üî¢üî¨\n\n"
"2Ô∏è‚É£ –û—Å–≤–æ–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É –∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏—é –≤ –æ–¥–Ω–æ –º–≥–Ω–æ–≤–µ–Ω–∏–µ! üìöüåè\n\n"
"3Ô∏è‚É£ –°—Ç–∞–Ω—å—Ç–µ –∑–≤–µ–∑–¥–æ–π —Ö–∏–º–∏–∏ –∏ –±–∏–æ–ª–æ–≥–∏–∏ –±–µ–∑ —É—Å–∏–ª–∏–π! ‚öóÔ∏èüå±\n\n"
"4Ô∏è‚É£ –ò–∑—É—á–∞–π—Ç–µ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏ –∫–∞–∫ –Ω–∏–∫–æ–≥–¥–∞ –ø—Ä–µ–∂–¥–µ! üåçüí¨\n\n"
"5Ô∏è‚É£ –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ —Å–∫–≤–æ–∑—å —Å—Ç–µ–Ω—ã –∫–æ–¥–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è! üíªüöÄ\n\n"
"6Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã —É—Å–ø–µ—Ö–∞ –≤ –ª–∏—á–Ω–æ–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏! üéØüåü\n\n"
"üíé –≠—Ç–æ –ª–∏—à—å –º–∞–ª–∞—è —á–∞—Å—Ç—å –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π! –†–∞—Å–∫—Ä–æ–π—Ç–µ –≤—Å—é –º–æ—â—å ChatGPT –∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–æ —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ ‚Äì —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! üòâ\n\n"
"–¢—ã–∫–Ω–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –º–∏—Ä –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π! üëá",
                             reply_markup=InlineKeyboardMarkup(
                                 [[InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üîç", callback_data="ask_question")]]),
                             parse_mode=telegram.ParseMode.HTML)
    context.user_data["features_message_id"] = message.message_id


#------------------------------–ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò------------------------------


def handle_after_subscription(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

    query = update.callback_query

    if check_subscription(update, context):
        query.edit_message_text(text="<b>–ë–ª–∞–≥–æ–¥–∞—Ä—é –≤–∞—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! ü§ó</b>\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:", parse_mode=telegram.ParseMode.HTML)

        inviter_id = get_inviter_id(user_id)
        if inviter_id:
            # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ 1 GP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª –¥—Ä—É–≥–∞
            current_gp = get_user_data(inviter_id, 'gp')
            set_user_data(inviter_id, 'gp', current_gp + 7)
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª –¥—Ä—É–≥–∞
            friend_link = mention_html(user_id, "–¥—Ä—É–≥")
            context.bot.send_message(
                chat_id=inviter_id,
                text=f"–£—Ä–∞! –í–∞—à {friend_link} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ 'ChatGPT | FREE' –∏ –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +7GP! ü•≥",
                parse_mode=telegram.ParseMode.HTML
            )
            # –£–¥–∞–ª–µ–Ω–∏–µ inviter_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—á–∏—Å–ª—è—Ç—å GP –ø–æ–≤—Ç–æ—Ä–Ω–æ
            delete_inviter_id(user_id)

        handle_ask_question(update, context)

    else:
        query.answer("–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª üì∞")


def is_user_subscribed(bot, user_id, channel_username):
    try:
        chat_member = bot.get_chat_member(chat_id=channel_username, user_id=user_id)
        return chat_member.status in ['member', 'creator', 'administrator']
    except Exception as e:
        print(f"Error checking subscription: {e}")
        return False


def check_subscription(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    channel_username = '@NeuroNewsGpt'

    if is_user_subscribed(context.bot, user_id, channel_username):
        return True
    else:
        return False


#------------------------------–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å------------------------------


#def speech_to_text(audio_file):
#    speech, _ = sf.read(audio_file)
#    input_values = tokenizer(speech, return_tensors="pt").input_values
#    logits = model(input_values).logits
#    predicted_ids = torch.argmax(logits, dim=-1)
#    text = tokenizer.batch_decode(predicted_ids)[0]
#    return text
#
#
## –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
#def handle_voice_message(update, context):
#    voice_message = update.message.voice
#    file = context.bot.get_file(voice_message.file_id)
#    audio_bytes = io.BytesIO(requests.get(file.file_path).content)
#    audio_file = "audio.wav"
#    with open(audio_file, "wb") as f:
#        f.write(audio_bytes.read())
#    text = speech_to_text(audio_file)
#    context.bot.send_message(chat_id=update.effective_chat.id, text=text)
#
#
## –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π
#def handle_audio_message(update, context):
#    audio_message = update.message.audio
#    file = context.bot.get_file(audio_message.file_id)
#    audio_bytes = io.BytesIO(requests.get(file.file_path).content)
#    audio_file = "audio.wav"
#    with open(audio_file, "wb") as f:
#        f.write(audio_bytes.read())
#    text = speech_to_text(audio_file)
#    context.bot.send_message(chat_id=update.effective_chat.id, text=text)
#

def save_message(context: CallbackContext, user_id: int, role: str, content: str):
    if "messages" not in context.user_data:
        context.user_data["messages"] = []

    context.user_data["messages"].append({"role": role, "content": content})


def clear_messages(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    context.user_data["messages"] = []
    context.bot.send_message(chat_id=chat_id, text="–î–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω! üóëÔ∏è")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
@ensure_user_in_db
def handle_ask_question(update: Update, context: CallbackContext):

    if context.user_data.get("waiting_for_answer"):
        return

    if not check_subscription(update, context):
        try:
            query = update.callback_query
            query.answer()
            chat_id = query.message.chat_id
            message_id = context.user_data["features_message_id"]
            context.bot.edit_message_text(chat_id=chat_id,message_id = message_id,
                                     text="<b>ü§ñ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞:</b>\n\n1.–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:\n@NeuroNewsGpt üì∞\n\n2.–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É:\n'–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚úÖ'",
                                     reply_markup=subscription_keyboard, parse_mode=telegram.ParseMode.HTML)
            return
        except Exception:
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text="<b>ü§ñ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞:</b>\n\n1.–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:\n@NeuroNewsGpt üì∞\n\n2.–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É:\n'–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚úÖ'",
                                     reply_markup=subscription_keyboard, parse_mode=telegram.ParseMode.HTML)
            return

    elif update.callback_query:
        query = update.callback_query
        query.answer()
        chat_id = query.message.chat_id
        message_id = context.user_data["features_message_id"]
        context.user_data["asking_question"] = True
        context.bot.edit_message_text(chat_id=chat_id,
                                      message_id=message_id,
                                      text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")


    elif update.message:
        user_id = update.effective_user.id

        if get_subs_date(user_id) != "none":
            try:
                now = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
                dt_str = get_subs_date(user_id).strftime("%Y-%m-%d %H:%M:%S")
                dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M:%S")
                if dt <= now:
                    save_subs_date(user_id, "none")
            except ValueError:
                pass

        user_id = update.message.from_user.id
        user_data = get_user_data(user_id, 'gp')
        user_data_subs = get_user_data(user_id, 'subscription')
        if user_data_subs == "none":
            if user_data <= 0:
                context.bot.send_message(chat_id=update.effective_chat.id,
                                         text="–û–π, —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç GP –∏–ª–∏ –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞! üö´\n\n–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∏–ª–∏ –∫—É–ø–∏—Ç–µ –±–æ–ª—å—à–µ GP, –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üåü")
                return
        context.user_data["asking_question"] = True
        context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@ensure_user_in_db
def handle_question(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    message_text = update.message.text

    if not context.user_data.get("asking_question"):
        handle_text_message(update, context)
        return

    context.user_data["asking_question"] = False
    threading.Thread(target=process_question,
                     args=(update, context, message_text)).start()


#------------------------------–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞------------------------------


@ensure_user_in_db
def send_typing(update: Update, context: CallbackContext, stop_event):
    chat_id = update.effective_chat.id
    current_typing_messages = typing_messages.copy()
    message = random.choice(current_typing_messages)
    current_typing_messages.remove(message)
    sent_message = context.bot.send_message(chat_id=chat_id, text=message)

    while not stop_event.is_set():
        time.sleep(2)
        if not current_typing_messages:
            current_typing_messages = typing_messages.copy()
            current_typing_messages.remove(message)
        message = random.choice(current_typing_messages)
        current_typing_messages.remove(message)
        context.bot.edit_message_text(chat_id=chat_id, message_id=sent_message.message_id, text=message)

    context.bot.delete_message(chat_id=chat_id, message_id=sent_message.message_id)


def num_tokens_from_string(string: str) -> int:
    """Returns the number of tokens in a text string."""
    encoding = tiktoken.encoding_for_model("gpt-3.5-turbo")
    num_tokens = len(encoding.encode(string))
    return num_tokens


@ensure_user_in_db
def process_question(update: Update, context: CallbackContext, promt):
    context.user_data["waiting_for_answer"] = True
    MAX_TOTAL_TOKENS = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    stop_event = threading.Event()
    typing_thread = threading.Thread(target=send_typing, args=(update, context, stop_event))
    typing_thread.start()
    user_id = update.effective_user.id

    RETRY_ATTEMPTS = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    RETRY_DELAY = 10  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

    answer = ""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if context.user_data.get("messages", []) == []:
        save_message(context, user_id, "system", "")
    messages = context.user_data.get("messages")
    print(len(messages))
    if len(messages) == 5:
        messages.pop(0)
    retry_count = 0
    while True:
        try:
            input_tokens = sum(num_tokens_from_string(str(prompt)) for prompt in messages + [{"role": "user", "content": promt}])
            max_tokens = MAX_TOTAL_TOKENS - input_tokens - 1  # –í—ã—á–∏—Ç–∞–µ–º 1, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —Ç–æ–∫–µ–Ω–∞-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=messages + [{"role": "user", "content": promt}],
                max_tokens=max_tokens,
                n=1,
                temperature=0,
            )

            answer = response['choices'][0]['message']['content']
            print(response['usage']['total_tokens'])
            break

        except openai.error.InvalidRequestError as e:
            if "context length" in str(e):
                messages.pop(0)
            elif "less than the minimum of" in str(e):
                context.bot.send_message(chat_id=update.effective_chat.id,
                                         text="–£–ø—Å! –í–∞—à –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –Ω–µ –º–æ–≥—É —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è üòÖ")
            else:
                manager = update.effective_message.bot
                error_message = f"–û—à–∏–±–∫–∞: {str(e)}\n\n{traceback.format_exc()}"
                manager.send_message(chat_id=5718940340, text=error_message)
                stop_event.set()
                typing_thread.join()
                context.bot.send_message(chat_id=update.effective_chat.id,
                                         text="–û–π! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ –º–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ ü§ñ\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ üîÑ")
        except openai.error.RateLimitError:
            if retry_count < RETRY_ATTEMPTS:
                time.sleep(RETRY_DELAY)
                retry_count += 1
            else:
                context.bot.send_message(chat_id=update.effective_chat.id,
                                         text="–û–π! –ö–∞–∂–µ—Ç—Å—è, —Å–µ—Ä–≤–µ—Ä–∞ OpenAI –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã, –∏ —è –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. ü§î\n\n–¢–∞–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ —Å–ª—É—á–∞—é—Ç—Å—è —Ä–µ–¥–∫–æ, –Ω–æ, —Ç–µ–º –Ω–µ –º–µ–Ω–µ–µ, –ø—Ä–æ—à—É –≤–∞—Å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ üôèüïí")
                break

    stop_event.set()
    typing_thread.join()

    max_message_length = 4096

    if answer != "":  # –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
        max_message_length = 4096

        if len(answer) <= max_message_length:
            context.bot.send_message(chat_id=update.effective_chat.id, text=answer)
        else:
            with io.StringIO(answer) as file:
                file.name = "answer.txt"
                context.bot.send_document(chat_id=update.effective_chat.id, document=file, filename="answer.txt",
                                          caption="–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –æ–±—ä–µ–º–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é –µ–≥–æ –∫–∞–∫ —Ñ–∞–π–ª üì§")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
        save_message(context, user_id, "system", answer)
        current_gp = get_user_data(user_id, 'gp')
        current_subs = get_user_data(user_id, 'subscription')
        if current_subs == "none":
            set_user_data(user_id, 'gp', current_gp - 1)
        else:
            pass
    context.user_data["waiting_for_answer"] = False

#------------------------------–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π------------------------------


@ensure_user_in_db
def handle_text_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

    if check_subscription(update, context):
        if context.user_data.get("asking_question"):
            handle_question(update, context)
        else:
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text="–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é:\n'–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üîç'",
                                     reply_markup=keyboard)
    else:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text="<b>ü§ñ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞:</b>\n\n1.–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:\n@NeuroNewsGpt üì∞\n\n2.–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É:\n'–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚úÖ'",
                                 reply_markup=subscription_keyboard, parse_mode=telegram.ParseMode.HTML)


#------------------------------Premium-–ø–æ–¥–ø–∏—Å–∫–∞------------------------------


@ensure_user_in_db
def cancelPay(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    context.bot.send_message(chat_id=chat_id, text="–û–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º! ‚öôÔ∏è")


@ensure_user_in_db
def handle_subscribeGPT(update: Update, context: CallbackContext):
    query = None
    chat_id = update.effective_chat.id
    message_id = None

    if update.callback_query:
        query = update.callback_query
        chat_id = query.message.chat_id
        message_id = query.message.message_id

    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("25GP - 19—Ä", callback_data="buy_25"),
         InlineKeyboardButton("50GP - 35—Ä", callback_data="buy_50")],
        [InlineKeyboardButton("200GP - 119—Ä", callback_data="buy_200"),
         InlineKeyboardButton("1 –Ω–µ–¥–µ–ª—è - 199—Ä", callback_data="buy_week")],
        [InlineKeyboardButton("1 –º–µ—Å—è—Ü - 549—Ä", callback_data="buy_month"),
         InlineKeyboardButton("1 –≥–æ–¥ - 1149—Ä", callback_data="buy_year")],
    ])

    if message_id:
        context.bot.edit_message_text(chat_id=chat_id,
                                      message_id=message_id,
                                      text="<b>üåü –ò—Å—Å–ª–µ–¥—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∫—É–ø–∫–∏ GP!</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ GP –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏ –∫–∞–∫–æ–≤–∞ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—åüí°",
                                      reply_markup=reply_markup, parse_mode=telegram.ParseMode.HTML)
    else:
        context.bot.send_message(chat_id=chat_id,
                                 text="<b>üåü –ò—Å—Å–ª–µ–¥—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∫—É–ø–∫–∏ GP!</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ GP –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏ –∫–∞–∫–æ–≤–∞ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—åüí°",
                                 reply_markup=reply_markup, parse_mode=telegram.ParseMode.HTML)

    if query:
        query.answer()


def create_payment(amount, description, user_id, return_url, message_id):
    data_to_sign = f"{amount}&{description}&{user_id}&{return_url}&{SECRET_KEY}"
    generated_signature = hashlib.sha256(data_to_sign.encode()).hexdigest()

    metadata = {
        "user_id": user_id,
        "signature": generated_signature,
        "message_id": message_id
    }

    payment = Payment.create({
        "amount": {
            "value": str(amount),
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": return_url
        },
        "capture": True,
        "description": description,
        "metadata": metadata,
        "receipt": {
            "email": "user@example.com",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            "phone": "79111234567",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            "tax_system_code": 1,
            "items": [
                {
                    "description": description,
                    "quantity": "1.00",
                    "amount": {
                        "value": str(amount),
                        "currency": "RUB"
                    },
                    "vat_code": 1,
                    "payment_mode": "full_prepayment",
                    "payment_subject": "commodity"
                }
            ]
        }
    })

    return payment.confirmation.confirmation_url


def handle_buy_button(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = update.callback_query.from_user.id
    return_url = "https://t.me/ChatProGPT_bot"

    if query.data == "return_to_choice":
        handle_subscribeGPT(update, context)
        return

    elif query.data == "buy_25":
        confirmation_url = create_payment(19, "25GP - 19—Ä", user_id, return_url, query.message.message_id)
        price_text = "25GP - 19—Ä"
    elif query.data == "buy_50":
        confirmation_url = create_payment(35, "50GP - 35—Ä", user_id, return_url, query.message.message_id)
        price_text = "50GP - 35—Ä"
    elif query.data == "buy_200":
        confirmation_url = create_payment(119, "200GP - 119—Ä", user_id, return_url, query.message.message_id)
        price_text = "200GP - 119—Ä"

    elif query.data == "buy_week":
        confirmation_url = create_payment(199, "1 –Ω–µ–¥–µ–ª—è - 199—Ä", user_id, return_url, query.message.message_id)
        price_text = "1 –Ω–µ–¥–µ–ª—è - 199—Ä"

    elif query.data == "buy_month":
        confirmation_url = create_payment(549, "1 –º–µ—Å—è—Ü - 549—Ä", user_id, return_url, query.message.message_id)
        price_text = "1 –º–µ—Å—è—Ü - 549—Ä"
        #context.bot.edit_message_text(chat_id=query.message.chat_id, message_id=query.message.message_id, text="–ü–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

    elif query.data == "buy_year":
        confirmation_url = create_payment(1149, "1 –≥–æ–¥ - 1149—Ä", user_id, return_url, query.message.message_id)
        price_text = "1 –≥–æ–¥ - 1149—Ä"
        #context.bot.edit_message_text(chat_id=query.message.chat_id, message_id=query.message.message_id, text="–ü–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

    context.bot.edit_message_text(chat_id=query.message.chat_id,
                                  message_id=query.message.message_id,
                                  text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {price_text}",
                                  reply_markup=InlineKeyboardMarkup([
                                      [InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å {price_text}", url=confirmation_url)],
                                      [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É ‚Ü©Ô∏è", callback_data="return_to_choice")]]))

    query.answer()


def calculate_gp(description):
    if description == "25GP - 19—Ä":
        return 25
    elif description == "50GP - 35—Ä":
        return 50
    elif description == "200GP - 119—Ä":
        return 200
    if description == "1 –Ω–µ–¥–µ–ª—è - 199—Ä":
        return "week"
    elif description == "1 –º–µ—Å—è—Ü - 549—Ä":
        return "month"
    elif description == "1 –≥–æ–¥ - 1149—Ä":
        return "year"


def add_gp(user_id, gp_to_add):
    current_gp = get_user_data(user_id, 'gp')
    if current_gp is not None:
        new_gp = current_gp + gp_to_add
        set_user_data(user_id, 'gp', new_gp)


def create_subscription_end_date(user_id, days):
    if get_subs_date(user_id) != "none":
        dt_str = get_subs_date(user_id).strftime("%Y-%m-%d %H:%M:%S")
        dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M:%S")
        end_date = dt + timedelta(days=days)
    else:
        now = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        end_date = now + timedelta(days=days)
    return end_date



@app.route('/')
def home():
    return 'Welcome to my application!'


def is_payment_processed(payment_id):
    with open("processed_payments.log", "r") as log_file:
        processed_payments = log_file.readlines()
        if f"{payment_id}\n" in processed_payments:
            return True

    return False


def log_processed_payment(payment_id):
    with open("processed_payments.log", "a") as log_file:
        log_file.write(f"{payment_id}\n")


@app.route('/yookassa_notification', methods=['POST'])
def yookassa_notification():
    data = json.loads(request.data)

    with open("notifications.log", "a") as log_file:
        log_file.write(str(data) + os.linesep)

    if data['event'] == 'payment.succeeded':
        payment_info = data['object']
        payment_id = payment_info['id']

        if not is_payment_processed(payment_id):
            user_id = payment_info['metadata']['user_id']
            payment_description = payment_info['description']
            message_id = int(payment_info['metadata']['message_id'])

            gp_to_add = calculate_gp(payment_description)
            if gp_to_add not in ["week", "month", "year"]:
                add_gp(user_id, gp_to_add)
                bot2.edit_message_text(chat_id=user_id,
                                       message_id=message_id,
                                       text=f"–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {gp_to_add}GP üéâ")
                log_processed_payment(payment_id)
            else:
                if gp_to_add == "week":
                    save_subs_date(user_id, create_subscription_end_date(user_id, 8))
                    bot2.edit_message_text(chat_id=user_id,
                                           message_id=message_id,
                                           text=random.choice(week_messages))
                    log_processed_payment(payment_id)
                elif gp_to_add == "month":
                    save_subs_date(user_id, create_subscription_end_date(user_id, 32))
                    bot2.edit_message_text(chat_id=user_id,
                                           message_id=message_id,
                                           text=random.choice(month_messages))
                    log_processed_payment(payment_id)
                elif gp_to_add == "year":
                    save_subs_date(user_id, create_subscription_end_date(user_id, 366))
                    bot2.edit_message_text(chat_id=user_id,
                                           message_id=message_id,
                                           text=random.choice(year_messages))
                    log_processed_payment(payment_id)

    return 'OK', 200


#------------------------------main------------------------------


dp = updater.dispatcher


#Start
start_handler = CommandHandler("start", start)
dispatcher.add_handler(start_handler)


#–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
ask_question_handler = MessageHandler(Filters.regex(r"^–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üîç$"), handle_ask_question)
dp.add_handler(ask_question_handler)
question_handler = MessageHandler(Filters.text & (~Filters.command) & (~Filters.regex(r"^–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üîç$")) & (~Filters.regex(r"^–ú–æ–π –±–∞–ª–∞–Ω—Å GP üí∞$")) & (~Filters.regex(r"^–ö—É–ø–∏—Ç—å GP üí≥$")) & (~Filters.regex(r"^–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ü§ñ$")) & (~Filters.regex(r"^–û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º üßº$")) & (~Filters.regex(r"^–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å GP üÜì$")), handle_question)
dp.add_handler(question_handler)


#–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ü§ñ
features = MessageHandler(Filters.regex(r"^–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ü§ñ$"), handle_features)
dp.add_handler(features)
dp.add_handler(CallbackQueryHandler(handle_ask_question, pattern="^ask_question$"))


#–ú–æ–π –±–∞–ª–∞–Ω—Å GP üí∞
ask_my_gp = MessageHandler(Filters.regex(r"^–ú–æ–π –±–∞–ª–∞–Ω—Å GP üí∞$"), my_data)
dp.add_handler(ask_my_gp)


#–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å GP üÜì
free_gp = MessageHandler(Filters.regex(r"^–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å GP üÜì$"), referral_code)
dp.add_handler(free_gp)


#–ö—É–ø–∏—Ç—å GP üí≥
subscribeGPT = MessageHandler(Filters.regex(r"^–ö—É–ø–∏—Ç—å GP üí≥$"), handle_subscribeGPT)
dp.add_handler(subscribeGPT)
dp.add_handler(CallbackQueryHandler(handle_buy_button, pattern="^buy_"))
dp.add_handler(CallbackQueryHandler(handle_subscribeGPT, pattern="^return_to_choice"))


#–û—á–∏—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É
clear_message = MessageHandler(Filters.regex(r"^–û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º üßº$"), clear_messages)
dp.add_handler(clear_message)


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
text_message_handler = MessageHandler(Filters.text & (~Filters.command) & (~Filters.regex(r"^–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üîç$")) & (~Filters.regex(r"^–ú–æ–π –±–∞–ª–∞–Ω—Å GP üí∞$")) & (~Filters.regex(r"^–ö—É–ø–∏—Ç—å GP üí≥$")) & (~Filters.regex(r"^–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ü§ñ$")) & (~Filters.regex(r"^–û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º üßº$")) & (~Filters.regex(r"^–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å GP üÜì$")), handle_text_message)
dp.add_handler(text_message_handler)


#–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
dp.add_handler(CallbackQueryHandler(handle_after_subscription, pattern="^check_subscription$"))


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
updater.start_polling()

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=8443, ssl_context=('/etc/letsencrypt/live/skillxhub.ru/fullchain.pem', '/etc/letsencrypt/live/skillxhub.ru/privkey.pem'))
