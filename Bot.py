import time

import logging

import threading

from typing import List

import random

import poe

import string

from firebase_admin import credentials, initialize_app, db

import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext
from telegram import ReplyKeyboardMarkup
from telegram import ChatAction

import uuid
from yookassa import Configuration, Payment

from flask import Flask, request
import hashlib
import json


import logging
import random
import string
from typing import List

import firebase_admin
from firebase_admin import credentials, db
from yookassa import Configuration, Payment


from flask import Flask, request
import hashlib
import json


SECRET_KEY = "live_MRRA6IBEnh0PA160XnqS6tq8mKkvh8IG2OQ8fNPhZ-Q"
Configuration.account_id = "312066"
Configuration.secret_key = SECRET_KEY


def create_payment(amount, description, user_id, return_url):
    payment = Payment.create({
        "amount": {
            "value": str(amount),
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": return_url
        },
        "capture": True,
        "description": description,
        "metadata": {
            "user_id": user_id
        },
        "receipt": {
            "email": "user@example.com",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            "phone": "79111234567",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            "tax_system_code": 1,
            "items": [
                {
                    "description": description,
                    "quantity": "1.00",
                    "amount": {
                        "value": str(amount),
                        "currency": "RUB"
                    },
                    "vat_code": 1,
                    "payment_mode": "full_prepayment",
                    "payment_subject": "commodity"
                }
            ]
        }
    })

    return payment.confirmation.confirmation_url



def on_callback_query(update, context):
    query = update.callback_query
    query.answer()

    if query.data.startswith('pay_'):
        price = int(query.data.split('_')[1])
        user_id = query.from_user.id
        return_url = "https://example.com/return_url"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã

        description = f"–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞: {price} —Ä—É–±."
        confirmation_url = create_payment(price, description, user_id, return_url)

        if confirmation_url:
            context.bot.send_message(chat_id=query.message.chat_id, text=f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{confirmation_url}")
        else:
            context.bot.send_message(chat_id=query.message.chat_id, text="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤
        pass


#TELEGRAM_BOT_TOKEN = "6248465953:AAFR9gek247GVqFeo4t-LgvwI5TEA8Nr9Ao" #–†–∞–±–æ—á–∏–π

TELEGRAM_BOT_TOKEN = "5785989131:AAFFcu7ekjOTXiMYK5ptMuxsamNVk8i65j0" #–¢–µ—Å—Ç–æ–≤—ã–π

client = poe.Client('Z2nTcuapVPT41-2IdLHnyA%3D%3D')

cred = credentials.Certificate("telegabot-16d96-firebase-adminsdk-vsi1b-ae3594244d.json")
initialize_app(cred, {'databaseURL': 'https://telegabot-16d96-default-rtdb.europe-west1.firebasedatabase.app/'})


def generate_random_name():
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=15))


def add_new_user(user_id, random_name_bot):
    ref = db.reference(f'users/{user_id}')
    ref.set({
        'random_name_bot': random_name_bot,
        'gp': 15,
        'subscription': "none"
    })


def user_exists(user_id):
    ref = db.reference(f'users/{user_id}')
    return ref.get() is not None


def get_user_data(user_id, field):
    ref = db.reference(f'users/{user_id}/{field}')
    return ref.get()


def set_user_data(user_id, field, value):
    ref = db.reference(f'users/{user_id}/{field}')
    ref.set(value)


def send_message_and_get_response_to_user_question(update: Update, message):
    #random_name_bot = "02dc6wx6ay83t8s" #generate_random_name()
    #client.create_bot(random_name_bot, prompt="", base_model="chinchilla")
    user_id = update.effective_user.id
    name_bot = get_user_data(user_id, 'random_name_bot')
    print(name_bot)
    response = ""
    for chunk in client.send_message(name_bot, message):  # random_name_bot, message):
        response += chunk["text_new"]

    return response


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


def start(update: Update, context: CallbackContext):
    keyboard = [
        ["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üîç", "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"],
        ["Premium-–ø–æ–¥–ø–∏—Å–∫–∞"], ["–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ"], ["–û—Ç—á–∏—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    user_id = update.effective_user.id

    user_data = get_user_data(user_id, "gp")
    if user_data == None:
        random_name_bot = ''.join(random.choices(string.ascii_lowercase + string.digits, k=15))
        add_new_user(user_id, random_name_bot)
        client.create_bot(random_name_bot, prompt="", base_model="chinchilla")
        user_data = get_user_data(user_id, 'gp')
        while user_data == None:
            print(user_data)

    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø ChatGPT! –Ø –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å! –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, –∑–∞–¥–∞–≤–∞–π!",
                              reply_markup=reply_markup)


def new_bot(user_id):
    random_name_bot = ''.join(random.choices(string.ascii_lowercase + string.digits, k=15))
    client.create_bot(random_name_bot, prompt="", base_model="chinchilla")
    ref = db.reference(f'users/{user_id}')
    ref.update({
        'random_name_bot': random_name_bot,
    })


def is_user_subscribed(bot, user_id, channel_username):
    try:
        chat_member = bot.get_chat_member(chat_id=channel_username, user_id=user_id)
        return chat_member.status in ['member', 'creator', 'administrator']
    except Exception as e:
        print(f"Error checking subscription: {e}")
        return False

def handle_check_subscription(update: Update, context: CallbackContext):
    query = update.callback_query

    if check_subscription(update, context):
        query.edit_message_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
    else:
        query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' –µ—â–µ —Ä–∞–∑.")


def check_subscription(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    channel_username = '@NeuroNewsGpt'

    if is_user_subscribed(context.bot, user_id, channel_username):
        return True
    else:
        return False


def update_user_data(user_id, chat_data, updated_data):
    chat_data[user_id].update(updated_data)


def my_data(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_data = get_user_data(user_id, context.user_data)
    current_gp = get_user_data(user_id, 'gp')
    update.message.reply_text(f"–í–∞—à —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: {current_gp}GP")


def handle_menu(update: Update, context: CallbackContext):
    user_message = update.message.text

    user_id = update.message.from_user.id
    user_data = get_user_data(user_id, 'gp')
    if user_data == None:
        random_name_bot = ''.join(random.choices(string.ascii_lowercase + string.digits, k=15))
        add_new_user(user_id, random_name_bot)
        client.create_bot(random_name_bot, prompt="", base_model="chinchilla")
        user_data = get_user_data(user_id, 'gp')
        while user_data == None:
            print(user_data)

    if user_message == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üîç":
        if check_subscription(update, context):
            context.user_data["ready_to_ask"] = True
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")
        else:
            # –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            update.message.reply_text("–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª @NeuroNewsGpt",
                                      reply_markup=InlineKeyboardMarkup([
                                          [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/NeuroNewsGpt"),
                                           InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]]))
    elif user_message == "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏":
        context.bot.send_message(chat_id=update.effective_chat.id, text="<b>üî• –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:</b>\n\n"
                                                                        "1Ô∏è‚É£ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ\n\n"
                                                                        "2Ô∏è‚É£ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç\n\n"
                                                                        "3Ô∏è‚É£ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\n\n"
                                                                        "4Ô∏è‚É£ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n\n"
                                                                        "5Ô∏è‚É£ –Ω–∞–ø–∏—Å–∞—Ç—å –∏ –æ—Ç–ª–∞–¥–∏—Ç—å –∫–æ–¥\n\n"
                                                                        "6Ô∏è‚É£ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è\n\n"
                                                                        "üí°–≠—Ç–æ –ª–∏—à—å –º–∞–ª–∞—è —á–∞—Å—Ç—å –º–æ–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞. –ó–∞–¥–∞–≤–∞–π –º–Ω–µ –ª—é–±—ã–µ –∑–∞–¥–∞—á–∏, –∞ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —Ç–µ–±–µ –ø–æ–º–æ—á—å.\n\n"
                                                                        "–ù–∞–∂–º–∏ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üîç' –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π. üëáüèª",
                                 reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üîç", callback_data="ask_question")]]), parse_mode=telegram.ParseMode.HTML)
    elif user_message == "Premium-–ø–æ–¥–ø–∏—Å–∫–∞":
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text="–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –∑–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏!",
                                 reply_markup=InlineKeyboardMarkup([
                                     [InlineKeyboardButton("25—à—Ç - 19—Ä", callback_data="buy_25"),
                                      InlineKeyboardButton("50—à—Ç - 35—Ä", callback_data="buy_50")],
                                     [InlineKeyboardButton("200—à—Ç - 119—Ä", callback_data="buy_200"),
                                      InlineKeyboardButton("1 –Ω–µ–¥–µ–ª—è - 199—Ä", callback_data="buy_week")],
                                     [InlineKeyboardButton("1 –º–µ—Å—è—Ü - 549—Ä", callback_data="buy_month"),
                                      InlineKeyboardButton("1 –≥–æ–¥ - 1149—Ä", callback_data="buy_year")],
                                 ]))
    elif user_message == "–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ":
        my_data(update, context)

    elif user_message == "–û—Ç—á–∏—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É":
        new_bot(user_id)
        context.bot.send_message(chat_id=update.effective_chat.id, text="–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—á–∏—â–µ–Ω–∞", parse_mode=telegram.ParseMode.HTML)
    else:
        if "ready_to_ask" in context.user_data:
            context.user_data["ready_to_ask"] = False


def handle_return_to_choice(update: Update, context: CallbackContext):
    query = update.callback_query

    context.bot.edit_message_text(chat_id=query.message.chat_id,
                                  message_id=query.message.message_id,
                                  text="–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –∑–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏!",
                                  reply_markup=InlineKeyboardMarkup([
                                      [InlineKeyboardButton("25—à—Ç - 19—Ä", callback_data="buy_25"),
                                       InlineKeyboardButton("50—à—Ç - 35—Ä", callback_data="buy_50")],
                                      [InlineKeyboardButton("200—à—Ç - 119—Ä", callback_data="buy_200"),
                                       InlineKeyboardButton("1 –Ω–µ–¥–µ–ª—è - 199—Ä", callback_data="buy_week")],
                                      [InlineKeyboardButton("1 –º–µ—Å—è—Ü - 549—Ä", callback_data="buy_month"),
                                       InlineKeyboardButton("1 –≥–æ–¥ - 1149—Ä", callback_data="buy_year")],
                                  ]))

    query.answer()


def handle_buy_button(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = update.callback_query.from_user.id
    return_url = "https://t.me/ChatProGPT_bot"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã

    if query.data == "buy_25":
        confirmation_url = create_payment(19, "25—à—Ç - 19—Ä", user_id, return_url)
        price_text = "25—à—Ç - 19—Ä"
    elif query.data == "buy_50":
        confirmation_url = create_payment(35, "50—à—Ç - 35—Ä", user_id, return_url)
        price_text = "50—à—Ç - 35—Ä"
    elif query.data == "buy_200":
        confirmation_url = create_payment(119, "200—à—Ç - 119—Ä", user_id, return_url)
        price_text = "200—à—Ç - 119—Ä"
    elif query.data == "buy_week":
        confirmation_url = create_payment(199, "1 –Ω–µ–¥–µ–ª—è - 199—Ä", user_id, return_url)
        price_text = "1 –Ω–µ–¥–µ–ª—è - 199—Ä"
    elif query.data == "buy_month":
        confirmation_url = create_payment(549, "1 –º–µ—Å—è—Ü - 549—Ä", user_id, return_url)
        price_text = "1 –º–µ—Å—è—Ü - 549—Ä"
    elif query.data == "buy_year":
        confirmation_url = create_payment(1149, "1 –≥–æ–¥ - 1149—Ä", user_id, return_url)
        price_text = "1 –≥–æ–¥ - 1149—Ä"

    context.bot.edit_message_text(chat_id=query.message.chat_id,
                                  message_id=query.message.message_id,
                                  text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {price_text}",
                                  reply_markup=InlineKeyboardMarkup([
                                      [InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å {price_text}", url=confirmation_url)],
                                      [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É", callback_data="return_to_choice")]]))

    query.answer()


def calculate_gp(amount):
    if amount == 6000:
        return 120
    elif amount == 11900:
        return 200
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ


def add_gp(user_id, gp_to_add):
    current_gp = get_user_data(user_id, 'gp')
    if current_gp is not None:
        new_gp = current_gp + gp_to_add
        set_user_data(user_id, 'gp', new_gp)


#–ü–†–û–í–ï–†–ö–ê –û–ü–õ–ê–¢–´
@app.route('/yookassa_notification', methods=['POST'])
def yookassa_notification(update: Update, context: CallbackContext):
    data = json.loads(request.data)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    original_signature = data.get('signature')
    generated_signature = hashlib.sha256(f"{data['notification_type']}&{data['operation_id']}&{data['amount']}&{data['currency']}&{data['datetime']}&{data['sender']}&{data['codepro']}&{SECRET_KEY}").hexdigest()

    if original_signature != generated_signature:
        return "Invalid signature", 400

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    if data['codepro'] == "false" and data['unaccepted'] == "false":
        user_id = data['label']
        total_amount = int(data['amount'])

        gp_to_add = calculate_gp(total_amount)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ GP –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏

        add_gp(user_id, gp_to_add)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è GP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        context.bot.send_message(chat_id=user_id, text=f"–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {gp_to_add} GP.")

    return 'OK', 200


def handle_inline_keyboard_button_click(update: Update, context: CallbackContext):
    query = update.callback_query
    callback_data = query.data

    if callback_data == "ask_question":
        context.user_data["ready_to_ask"] = True
        query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")
    else:
        query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")


def ask_question(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_data = get_user_data(user_id, 'gp')
    user_data_subs = get_user_data(user_id, 'subscription')
    if context.user_data.get("ready_to_ask"):

        if user_data > 0 or user_data_subs != "none":
            context.user_data["ready_to_ask"] = True
            if context.user_data.get("ready_to_ask"):
                user_message = update.message.text

                # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
                loading_messages = [
                    "ChatGPT –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–≤–µ—Ä—Ö—Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞–Ω–∏—è... ü§ñ",
                    "–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –≤–µ–ª–∏–∫–æ–º—É –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É... üí°",
                    "–ò—â—É –æ—Ç–≤–µ—Ç –≤ –≥–ª—É–±–∏–Ω–∞—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞... üåê",
                    "–í–∑–ª–∞–º—ã–≤–∞—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∏–∏... üìö",
                    "–°–∫–∞–Ω–∏—Ä—É—é –≤—Å–µ –∫–Ω–∏–≥–∏ –º–∏—Ä–∞... üìñ",
                    "–°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ –≤—Å–µ–π –ì–∞–ª–∞–∫—Ç–∏–∫–∏... üåå",
                    "–®–∏—Ñ—Ä—É—é –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –µ–≥–æ –Ω–µ —É–∫—Ä–∞–ª–∏... üîí",
                    "–í–∞—à –≤–æ–ø—Ä–æ—Å —Å—Ç–æ–∏—Ç –º–∏–ª–ª–∏–æ–Ω... üí∞",
                    "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤... üß†",
                    "–°–æ–±–∏—Ä–∞—é –∫–æ–º–∞–Ω–¥—É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞... üë©‚Äçüî¨üë®‚Äçüî¨",
                    "–ó–∞–≥—Ä—É–∂–∞—é –∫—Ä–∏—Å—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π —à–∞—Ä –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π... üîÆ",
                    "–ò—â—É –º—É–¥—Ä–æ—Å—Ç—å –≤ –ø—É—Å—Ç—ã–Ω–µ –ì–æ–±–∏... üèúÔ∏è",
                    "–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å –≤–æ–ª—à–µ–±–Ω—ã–º–∏ —Å—É—â–µ—Å—Ç–≤–∞–º–∏... üßö",
                    "–ó–∞–¥–∞—é –≤–æ–ø—Ä–æ—Å —Å–∞–º–æ–º—É —Å–µ–±–µ –≤ –ø—Ä–æ—à–ª–æ–º... üï∞Ô∏è",
                    "–ß–∏—Ç–∞—é –º—ã—Å–ª–∏ –∑–Ω–∞–º–µ–Ω–∏—Ç—ã—Ö —É—á–µ–Ω—ã—Ö... üß™",
                    "–ü—Ä–æ–∫–∞—á–∏–≤–∞—é –º–æ–∑–≥ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è... üéÆ",
                    "–ü–µ—Ä–µ–≥—Ä—É–∂–∞—é—Å—å –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å... üöÄ",
                    "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–º –∑–Ω–∞–Ω–∏—è–º –ê—Ç–ª–∞–Ω—Ç–∏–¥—ã... üåä",
                    "–û–±—É—á–∞—é—Å—å —Ç–µ–ª–µ–ø–∞—Ç–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞... ‚öõÔ∏è",
                    "–ü—Ä–æ–≤–µ—Ä—è—é –≤–µ—Å—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∑–∞ —Å–µ–∫—É–Ω–¥—É... ‚è±Ô∏è",
                    "–°–æ–±–∏—Ä–∞—é –∫—É–±–∏–∫ –†—É–±–∏–∫–∞ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è... üß©",
                    "–°–æ–≤–µ—Ç—É—é—Å—å —Å –º—É–¥—Ä—ã–º–∏ —Å–æ–≤–∞–º–∏ –ì–æ–≥–≤–∞—Ä—Ç—Å–∞... ü¶â",
                    "–ó–∞–≥–∞–¥—ã–≤–∞—é –≤–æ–ø—Ä–æ—Å –Ω–∞ –∫–æ—Ñ–µ–π–Ω–æ–π –≥—É—â–µ... ‚òï",
                    "–û–±—Ä–∞—â–∞—é—Å—å –∫ –î–∂–∏–Ω–Ω—É –∏–∑ –≤–æ–ª—à–µ–±–Ω–æ–π –ª–∞–º–ø—ã... üßû",
                    "–ò—Å–ø–æ–ª—å–∑—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–∞—à–∏–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞... ‚è≥",
                    "–ê–∫—Ç–∏–≤–∏—Ä—É—é —Ä–µ–∂–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏... üëÅÔ∏è",
                    "–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º–∏ —á–µ—Ä–µ–ø–∞—à–∫–∞–º–∏-–Ω–∏–Ω–¥–∑—è... üê¢",
                    "–ü—Ä–æ–≤–µ—Ä—è—é –∑–Ω–∞–Ω–∏—è —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏... üßô",
                    "–ü–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞—é –≤—Å–µ —ç–ø–∏–∑–æ–¥—ã '–†–∏–∫–∞ –∏ –ú–æ—Ä—Ç–∏' –∑–∞ –æ—Ç–≤–µ—Ç–∞–º–∏... üì∫",
                    "–ò—Å–ø–æ–ª—å–∑—É—é –¥–µ—Ç–µ–∫—Ç–æ—Ä –ª–∂–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤... üïµÔ∏è",
                    "–ü—Ä–∏–≥–ª–∞—à–∞—é –∫—Ä—É—Ç–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–∏–≤–∞ –¥–ª—è —Ä–∞–∑–≥–∞–¥–∫–∏ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞... üé©",
                    "–ó–∞–¥–∞—é –≤–æ–ø—Ä–æ—Å –≤—Å–µ–º–∏—Ä–Ω–æ–π –ø–∞—É—Ç–∏–Ω–µ –º—É–¥—Ä–µ—Ü–æ–≤... üï∏Ô∏è",
                    "–ò—Å–ø–æ–ª—å–∑—É—é –¥—Ä–µ–≤–Ω–µ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞... üÄÑ",
                    "–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –º—É–¥—Ä–æ—Å—Ç—å —Å –≤–µ—Ä—à–∏–Ω—ã –≥–æ—Ä—ã... üèîÔ∏è",
                    "–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å –¥–µ–ª—å—Ñ–∏–Ω–∞–º–∏-–≥–µ–Ω–∏—è–º–∏... üê¨",
                    "–ü—Ä–æ–≤–æ–∂—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º –º–∏—Ä–µ... üåç",
                    "–°–æ–≤–µ—Ä—à–∞—é –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞... üïó",
                    "–ü—Ä–æ—à—É –º—É–¥—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ü–∞ –∏–∑ –¥–µ—Ä–µ–≤–Ω–∏ –∑–Ω–∞–Ω–∏–π... üßì",
                    "–ò—Å–ø–æ–ª—å–∑—É—é –º–∞–≥–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–∞—Å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –æ—Ç–≤–µ—Ç—É... üß≠",
                    "–ó–∞–≥–∞–¥—ã–≤–∞—é –≤–æ–ø—Ä–æ—Å –¥—Ä–µ–≤–Ω–µ–º—É –¥—Ä–∞–∫–æ–Ω—É... üêâ",
                    "–°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Ç—ã—Å—è—á–∏ –ø–ª–∞–Ω–µ—Ç... ü™ê",
                    "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é –≤—Å–µ –∑–Ω–∞–Ω–∏—è –•–æ–≥–≤–∞—Ä—Ç—Å–∞... üè∞",
                    "–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å –æ—Ä–∞–∫—É–ª–æ–º –î–µ–ª—å—Ñ–∏... üè∫",
                    "–ò—Å–ø–æ–ª—å–∑—É—é –º–µ—Ç–æ–¥—ã –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞... üîç",
                    "–ü—Ä–∏–≥–ª–∞—à–∞—é –∫–æ–º–∞–Ω–¥—É —Å—É–ø–µ—Ä–≥–µ—Ä–æ–µ–≤ –¥–ª—è —Å–æ–≤–µ—Ç–∞... ü¶∏",
                    "–°–ª—É—à–∞—é —à–µ–ø–æ—Ç –¥–µ—Ä–µ–≤—å–µ–≤ –º—É–¥—Ä–æ—Å—Ç–∏... üå≥",
                    "–í–∑–ª–∞–º—ã–≤–∞—é –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∞–≤–¥—ã... üíª",
                    "–ê–∫—Ç–∏–≤–∏—Ä—É—é –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∑–Ω–∞–Ω–∏–π... üåé"
                ]

                loading_message = random.choice(loading_messages)

                def send_typing_animation(update, context, loading_messages, delay, random_choice=False):
                    loading_msg = context.bot.send_message(chat_id=update.effective_chat.id, text=loading_messages[0])

                    prev_loading_message = None
                    while not context.user_data.get("stop_loading"):
                        if random_choice:
                            loading_message = random.choice(loading_messages)
                        else:
                            loading_message = loading_messages.pop(0)
                            loading_messages.append(loading_message)

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
                        if loading_message != prev_loading_message:
                            try:
                                context.bot.edit_message_text(chat_id=update.effective_chat.id,
                                                              message_id=loading_msg.message_id,
                                                              text=loading_message)
                                prev_loading_message = loading_message  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                            except telegram.error.BadRequest as e:
                                logger.warning(f"Failed to edit message: {e}")
                        else:
                            logger.warning("New message is the same as the previous one. Skipping.")

                        context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)



                        time.sleep(delay)

                context.user_data['stop_loading'] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –≤–æ–ø—Ä–æ—Å–æ–º

                # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
                loading_thread = threading.Thread(target=send_typing_animation,
                                                  args=(update, context, loading_messages, 2, True))
                loading_thread.start()

                # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WebDriver –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç
                response = send_message_and_get_response_to_user_question(update, user_message)

                context.user_data['stop_loading'] = True  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
                loading_thread.join()  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∑–∞–≥—Ä—É–∑–∫–∏

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
                try:
                    context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id + 1)
                except Exception as e:
                    logger.warning(f"Failed to delete loading message: {e}")

                if response:
                    context.bot.send_message(chat_id=update.effective_chat.id, text=response)
                    context.user_data["ready_to_ask"] = False
                else:
                    update.message.reply_text(
                        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å —á—É—Ç—å –ø–æ–∑–∂–µ."
                    )

            current_gp = get_user_data(user_id, 'gp')
            set_user_data(user_id, 'gp', current_gp - 1)

        else:
            update.message.reply_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GP –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
    else:
        update.message.reply_text(
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å —É –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å, —Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'! –ò —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ—Ç–≤–µ—á—É –≤–∞–º.")

def send_typing_animation(update: Update, context: CallbackContext, messages: List[str], delay: int,
                          loop: bool = False):
    index = 0
    chat_id = update.effective_chat.id
    message_id = None

    while not context.user_data.get('stop_loading'):
        try:
            if message_id is None:
                sent_message = context.bot.send_message(chat_id=chat_id, text=messages[index])
                message_id = sent_message.message_id
            else:
                context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=messages[index])

            time.sleep(delay)

            index += 1
            if index == len(messages):
                if loop:
                    index = 0
                else:
                    break
        except Exception as e:
            logger.warning(f"Failed to send or edit typing animation: {e}")
            break


def error(update: Update, context: CallbackContext):
    logger.warning('Update "%s" caused error "%s"', update, context.error)


def main():
    updater = Updater(TELEGRAM_BOT_TOKEN)

    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.regex('^–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üîç$'), handle_menu))
    dp.add_handler(MessageHandler(Filters.regex('^–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏$'), handle_menu))
    dp.add_handler(MessageHandler(Filters.regex('^Premium-–ø–æ–¥–ø–∏—Å–∫–∞$'), handle_menu))
    dp.add_handler(MessageHandler(Filters.regex('^–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ$'), handle_menu))
    dp.add_handler(MessageHandler(Filters.regex('^–û—Ç—á–∏—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É$'), handle_menu))

    dp.add_handler(CallbackQueryHandler(handle_buy_button, pattern="^buy_"))
    dp.add_handler(CallbackQueryHandler(handle_return_to_choice, pattern="^return_to_choice"))
    dp.add_handler(CallbackQueryHandler(handle_check_subscription, pattern="^check_subscription$"))

    dp.add_handler(MessageHandler(Filters.text, ask_question))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, ask_question))

    dp.add_handler(CallbackQueryHandler(handle_inline_keyboard_button_click))
    dp.add_handler(CallbackQueryHandler(on_callback_query))

    dp.add_error_handler(error)

    # –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
    app.run(host='0.0.0.0', port=8443, ssl_context=('/etc/letsencrypt/live/skillxhub.ru/fullchain.pem', '/etc/letsencrypt/live/skillxhub.ru/privkey.pem'))
