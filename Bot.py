import time

import logging

import threading

from typing import List

import random

import poe

import os

import string

from firebase_admin import credentials, initialize_app, db

import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext
from telegram import ReplyKeyboardMarkup
from telegram import ChatAction

import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode
from aiogram.utils import executor



payment_links = {
    "25_requests": "https://poe.com/Sage25",
    "50_requests": "https://poe.com/Sage50",
    "200_requests": "https://poe.com/Sage200",
    "1_week": "https://poe.com/Sage1Week",
    "1_month": "https://poe.com/Sage1Month",
    "1_year": "https://poe.com/Sage1Year",
}

#TELEGRAM_BOT_TOKEN = "6248465953:AAFR9gek247GVqFeo4t-LgvwI5TEA8Nr9Ao" #–†–∞–±–æ—á–∏–π

TELEGRAM_BOT_TOKEN = "5785989131:AAFFcu7ekjOTXiMYK5ptMuxsamNVk8i65j0" #–¢–µ—Å—Ç–æ–≤—ã–π

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp2 = Dispatcher(bot)
dp2.middleware.setup(LoggingMiddleware())

client = poe.Client('Z2nTcuapVPT41-2IdLHnyA%3D%3D')

cred = credentials.Certificate("telegabot-16d96-firebase-adminsdk-vsi1b-ae3594244d.json")
initialize_app(cred, {'databaseURL': 'https://telegabot-16d96-default-rtdb.europe-west1.firebasedatabase.app/'})


async def generate_random_name():
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=15))


async def add_new_user(user_id, random_name_bot):
    ref = db.reference(f'users/{user_id}')
    ref.set({
        'random_name_bot': random_name_bot,
        'gp': 15,
        'subscription': "none"
    })


async def user_exists(user_id):
    ref = db.reference(f'users/{user_id}')
    return ref.get() is not None


async def get_user_data(user_id, field):
    ref = db.reference(f'users/{user_id}/{field}')
    return ref.get()


async def set_user_data(user_id, field, value):
    ref = db.reference(f'users/{user_id}/{field}')
    ref.set(value)


async def send_message_and_get_response_to_user_question(update: Update, message):
    #random_name_bot = "02dc6wx6ay83t8s" #generate_random_name()
    #client.create_bot(random_name_bot, prompt="", base_model="chinchilla")
    user_id = update.effective_user.id
    name_bot = get_user_data(user_id, 'random_name_bot')
    print(name_bot)
    response = ""
    for chunk in client.send_message(name_bot, message):  # random_name_bot, message):
        response += chunk["text_new"]

    return response


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


async def start(update: Update, context: CallbackContext):
    keyboard = [
        ["–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üîç", "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"],
        ["Premium-–ø–æ–¥–ø–∏—Å–∫–∞"], ["–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ"], ["–û—Ç—á–∏—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    user_id = update.effective_user.id

    user_data = await get_user_data(user_id, "gp")
    if user_data is None:
        random_name_bot = ''.join(random.choices(string.ascii_lowercase + string.digits, k=15))
        await add_new_user(user_id, random_name_bot)
        client.create_bot(random_name_bot, prompt="", base_model="chinchilla")
        user_data = await get_user_data(user_id, 'gp')
        while user_data is None:
            print(user_data)

    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø ChatGPT! –Ø –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å! –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, –∑–∞–¥–∞–≤–∞–π!",
                              reply_markup=reply_markup)



async def new_bot(user_id):
    random_name_bot = ''.join(random.choices(string.ascii_lowercase + string.digits, k=15))
    client.create_bot(random_name_bot, prompt="", base_model="chinchilla")
    ref = db.reference(f'users/{user_id}')
    ref.update({
        'random_name_bot': random_name_bot,
    })


async def is_user_subscribed(bot, user_id, channel_username):
    try:
        chat_member = await bot.get_chat_member(chat_id=channel_username, user_id=user_id)
        return chat_member.status in ['member', 'creator', 'administrator']
    except Exception as e:
        print(f"Error checking subscription: {e}")
        return False

async def handle_check_subscription(update: Update, context: CallbackContext):
    query = update.callback_query

    if await check_subscription(update, context):
        await query.edit_message_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
    else:
        await query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' –µ—â–µ —Ä–∞–∑.")

async def check_subscription(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    channel_username = '@NeuroNewsGpt'

    if await is_user_subscribed(context.bot, user_id, channel_username):
        return True
    else:
        return False

async def update_user_data(user_id, chat_data, updated_data):
    chat_data[user_id].update(updated_data)

async def my_data(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_data = get_user_data(user_id, context.user_data)
    current_gp = await get_user_data(user_id, 'gp')
    update.message.reply_text(f"–í–∞—à —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: {current_gp}GP")



async def handle_menu(update: Update, context: CallbackContext):
    user_message = update.message.text

    user_id = update.message.from_user.id
    user_data = await get_user_data(user_id, 'gp')
    if user_data == None:
        random_name_bot = ''.join(random.choices(string.ascii_lowercase + string.digits, k=15))
        await add_new_user(user_id, random_name_bot)
        client.create_bot(random_name_bot, prompt="", base_model="chinchilla")
        user_data = await get_user_data(user_id, 'gp')
        while user_data == None:
            print(user_data)

    if user_message == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üîç":
        if await check_subscription(update, context):
            context.user_data["ready_to_ask"] = True
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")
        else:
            update.message.reply_text("–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª @NeuroNewsGpt",
                                      reply_markup=InlineKeyboardMarkup([
                                          [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/NeuroNewsGpt"),
                                           InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]]))
    elif user_message == "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏":
        context.bot.send_message(chat_id=update.effective_chat.id, text="<b>üî• –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:</b>\n\n"
                                                                        "1Ô∏è‚É£ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ\n\n"
                                                                        "2Ô∏è‚É£ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç\n\n"
                                                                        "3Ô∏è‚É£ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\n\n"
                                                                        "4Ô∏è‚É£ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n\n"
                                                                        "5Ô∏è‚É£ –Ω–∞–ø–∏—Å–∞—Ç—å –∏ –æ—Ç–ª–∞–¥–∏—Ç—å –∫–æ–¥\n\n"
                                                                        "6Ô∏è‚É£ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è\n\n"
                                                                        "üí°–≠—Ç–æ –ª–∏—à—å –º–∞–ª–∞—è —á–∞—Å—Ç—å –º–æ–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞. –ó–∞–¥–∞–≤–∞–π –º–Ω–µ –ª—é–±—ã–µ –∑–∞–¥–∞—á–∏, –∞ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —Ç–µ–±–µ –ø–æ–º–æ—á—å.\n\n"
                                                                        "–ù–∞–∂–º–∏ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üîç' –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π. üëáüèª",
                                 reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üîç", callback_data="ask_question")]]), parse_mode=telegram.ParseMode.HTML)
    elif user_message == "Premium-–ø–æ–¥–ø–∏—Å–∫–∞":
        context.bot.send_message(chat_id=update.effective_chat.id, text="–î–æ—Å—Ç—É–ø–Ω–æ 10 –∑–∞–ø—Ä–æ—Å–æ–≤. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –∑–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏!",
                                 reply_markup=InlineKeyboardMarkup([
                                     [InlineKeyboardButton("25—à—Ç - 19—Ä", callback_data="25_requests"),
                                      InlineKeyboardButton("50—à—Ç - 35—Ä", callback_data="50_requests")],
                                     [InlineKeyboardButton("200—à—Ç - 119—Ä", callback_data="200_requests"),
                                      InlineKeyboardButton("1 –Ω–µ–¥–µ–ª—è - 199—Ä", callback_data="1_week")],
                                     [InlineKeyboardButton("1 –º–µ—Å—è—Ü - 549—Ä", callback_data="1_month"),
                                      InlineKeyboardButton("1 –≥–æ–¥ - 1149—Ä", callback_data="1_year")],
                                 ]))
    elif user_message == "–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ":
        my_data(update, context)

    elif user_message == "–û—Ç—á–∏—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É":
        new_bot(user_id)
        context.bot.send_message(chat_id=update.effective_chat.id, text="–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—á–∏—â–µ–Ω–∞", parse_mode=telegram.ParseMode.HTML)
    else:
        if "ready_to_ask" in context.user_data:
            context.user_data["ready_to_ask"] = False



async def handle_inline_keyboard_button_click(update: Update, context: CallbackContext):
    query = update.callback_query
    callback_data = query.data

    if callback_data == "ask_question":
        context.user_data["ready_to_ask"] = True
        await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")
    elif callback_data in payment_links:
        payment_link = payment_links[callback_data]
        await query.edit_message_text(f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_link}")
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")


async def ask_question(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_data = await get_user_data(user_id, 'gp')
    if context.user_data.get("ready_to_ask"):
        if user_data > 0:
            context.user_data["ready_to_ask"] = True
            if context.user_data.get("ready_to_ask"):
                user_message = update.message.text
                loading_messages = [
                    "ChatGPT –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–≤–µ—Ä—Ö—Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞–Ω–∏—è... ü§ñ",
                    "–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –≤–µ–ª–∏–∫–æ–º—É –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É... üí°",
                    "–ò—â—É –æ—Ç–≤–µ—Ç –≤ –≥–ª—É–±–∏–Ω–∞—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞... üåê",
                    "–í–∑–ª–∞–º—ã–≤–∞—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∏–∏... üìö",
                    "–°–∫–∞–Ω–∏—Ä—É—é –≤—Å–µ –∫–Ω–∏–≥–∏ –º–∏—Ä–∞... üìñ",
                    "–°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ –≤—Å–µ–π –ì–∞–ª–∞–∫—Ç–∏–∫–∏... üåå",
                    "–®–∏—Ñ—Ä—É—é –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –µ–≥–æ –Ω–µ —É–∫—Ä–∞–ª–∏... üîí",
                    "–í–∞—à –≤–æ–ø—Ä–æ—Å —Å—Ç–æ–∏—Ç –º–∏–ª–ª–∏–æ–Ω... üí∞",
                    "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤... üß†",
                    "–°–æ–±–∏—Ä–∞—é –∫–æ–º–∞–Ω–¥—É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞... üë©‚Äçüî¨üë®‚Äçüî¨",
                    "–ó–∞–≥—Ä—É–∂–∞—é –∫—Ä–∏—Å—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π —à–∞—Ä –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π... üîÆ",
                    "–ò—â—É –º—É–¥—Ä–æ—Å—Ç—å –≤ –ø—É—Å—Ç—ã–Ω–µ –ì–æ–±–∏... üèúÔ∏è",
                    "–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å –≤–æ–ª—à–µ–±–Ω—ã–º–∏ —Å—É—â–µ—Å—Ç–≤–∞–º–∏... üßö",
                    "–ó–∞–¥–∞—é –≤–æ–ø—Ä–æ—Å —Å–∞–º–æ–º—É —Å–µ–±–µ –≤ –ø—Ä–æ—à–ª–æ–º... üï∞Ô∏è",
                    "–ß–∏—Ç–∞—é –º—ã—Å–ª–∏ –∑–Ω–∞–º–µ–Ω–∏—Ç—ã—Ö —É—á–µ–Ω—ã—Ö... üß™",
                    "–ü—Ä–æ–∫–∞—á–∏–≤–∞—é –º–æ–∑–≥ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è... üéÆ",
                    "–ü–µ—Ä–µ–≥—Ä—É–∂–∞—é—Å—å –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å... üöÄ",
                    "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–º –∑–Ω–∞–Ω–∏—è–º –ê—Ç–ª–∞–Ω—Ç–∏–¥—ã... üåä",
                    "–û–±—É—á–∞—é—Å—å —Ç–µ–ª–µ–ø–∞—Ç–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞... ‚öõÔ∏è",
                    "–ü—Ä–æ–≤–µ—Ä—è—é –≤–µ—Å—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∑–∞ —Å–µ–∫—É–Ω–¥—É... ‚è±Ô∏è",
                    "–°–æ–±–∏—Ä–∞—é –∫—É–±–∏–∫ –†—É–±–∏–∫–∞ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è... üß©",
                    "–°–æ–≤–µ—Ç—É—é—Å—å —Å –º—É–¥—Ä—ã–º–∏ —Å–æ–≤–∞–º–∏ –ì–æ–≥–≤–∞—Ä—Ç—Å–∞... ü¶â",
                    "–ó–∞–≥–∞–¥—ã–≤–∞—é –≤–æ–ø—Ä–æ—Å –Ω–∞ –∫–æ—Ñ–µ–π–Ω–æ–π –≥—É—â–µ... ‚òï",
                    "–û–±—Ä–∞—â–∞—é—Å—å –∫ –î–∂–∏–Ω–Ω—É –∏–∑ –≤–æ–ª—à–µ–±–Ω–æ–π –ª–∞–º–ø—ã... üßû",
                    "–ò—Å–ø–æ–ª—å–∑—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–∞—à–∏–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞... ‚è≥",
                    "–ê–∫—Ç–∏–≤–∏—Ä—É—é —Ä–µ–∂–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏... üëÅÔ∏è",
                    "–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º–∏ —á–µ—Ä–µ–ø–∞—à–∫–∞–º–∏-–Ω–∏–Ω–¥–∑—è... üê¢",
                    "–ü—Ä–æ–≤–µ—Ä—è—é –∑–Ω–∞–Ω–∏—è —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏... üßô",
                    "–ü–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞—é –≤—Å–µ —ç–ø–∏–∑–æ–¥—ã '–†–∏–∫–∞ –∏ –ú–æ—Ä—Ç–∏' –∑–∞ –æ—Ç–≤–µ—Ç–∞–º–∏... üì∫",
                    "–ò—Å–ø–æ–ª—å–∑—É—é –¥–µ—Ç–µ–∫—Ç–æ—Ä –ª–∂–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤... üïµÔ∏è",
                    "–ü—Ä–∏–≥–ª–∞—à–∞—é –∫—Ä—É—Ç–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–∏–≤–∞ –¥–ª—è —Ä–∞–∑–≥–∞–¥–∫–∏ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞... üé©",
                    "–ó–∞–¥–∞—é –≤–æ–ø—Ä–æ—Å –≤—Å–µ–º–∏—Ä–Ω–æ–π –ø–∞—É—Ç–∏–Ω–µ –º—É–¥—Ä–µ—Ü–æ–≤... üï∏Ô∏è",
                    "–ò—Å–ø–æ–ª—å–∑—É—é –¥—Ä–µ–≤–Ω–µ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞... üÄÑ",
                    "–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –º—É–¥—Ä–æ—Å—Ç—å —Å –≤–µ—Ä—à–∏–Ω—ã –≥–æ—Ä—ã... üèîÔ∏è",
                    "–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å –¥–µ–ª—å—Ñ–∏–Ω–∞–º–∏-–≥–µ–Ω–∏—è–º–∏... üê¨",
                    "–ü—Ä–æ–≤–æ–∂—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º –º–∏—Ä–µ... üåç",
                    "–°–æ–≤–µ—Ä—à–∞—é –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞... üïó",
                    "–ü—Ä–æ—à—É –º—É–¥—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ü–∞ –∏–∑ –¥–µ—Ä–µ–≤–Ω–∏ –∑–Ω–∞–Ω–∏–π... üßì",
                    "–ò—Å–ø–æ–ª—å–∑—É—é –º–∞–≥–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–∞—Å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –æ—Ç–≤–µ—Ç—É... üß≠",
                    "–ó–∞–≥–∞–¥—ã–≤–∞—é –≤–æ–ø—Ä–æ—Å –¥—Ä–µ–≤–Ω–µ–º—É –¥—Ä–∞–∫–æ–Ω—É... üêâ",
                    "–°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Ç—ã—Å—è—á–∏ –ø–ª–∞–Ω–µ—Ç... ü™ê",
                    "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é –≤—Å–µ –∑–Ω–∞–Ω–∏—è –•–æ–≥–≤–∞—Ä—Ç—Å–∞... üè∞",
                    "–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å –æ—Ä–∞–∫—É–ª–æ–º –î–µ–ª—å—Ñ–∏... üè∫",
                    "–ò—Å–ø–æ–ª—å–∑—É—é –º–µ—Ç–æ–¥—ã –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞... üîç",
                    "–ü—Ä–∏–≥–ª–∞—à–∞—é –∫–æ–º–∞–Ω–¥—É —Å—É–ø–µ—Ä–≥–µ—Ä–æ–µ–≤ –¥–ª—è —Å–æ–≤–µ—Ç–∞... ü¶∏",
                    "–°–ª—É—à–∞—é —à–µ–ø–æ—Ç –¥–µ—Ä–µ–≤—å–µ–≤ –º—É–¥—Ä–æ—Å—Ç–∏... üå≥",
                    "–í–∑–ª–∞–º—ã–≤–∞—é –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∞–≤–¥—ã... üíª",
                    "–ê–∫—Ç–∏–≤–∏—Ä—É—é –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∑–Ω–∞–Ω–∏–π... üåé"
                ]

                loading_message = random.choice(loading_messages)

                async def send_typing_animation(update, context, loading_messages, delay, random_choice=False):
                    loading_msg = await context.bot.send_message(chat_id=update.effective_chat.id,
                                                                 text=loading_messages[0])
                    prev_loading_message = None
                    while not context.user_data.get("stop_loading"):
                        if random_choice:
                            loading_message = random.choice(loading_messages)
                        else:
                            loading_message = loading_messages.pop(0)
                            loading_messages.append(loading_message)
                        if loading_message != prev_loading_message:
                            try:
                                await context.bot.edit_message_text(chat_id=update.effective_chat.id,
                                                                    message_id=loading_msg.message_id,
                                                                    text=loading_message)
                                prev_loading_message = loading_message
                            except telegram.error.BadRequest as e:
                                logger.warning(f"Failed to edit message: {e}")
                        else:
                            logger.warning("New message is the same as the previous one. Skipping.")
                        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
                        await asyncio.sleep(delay)

                context.user_data['stop_loading'] = False
                loading_thread = asyncio.create_task(send_typing_animation(update, context, loading_messages, 2, True))
                response = await send_message_and_get_response_to_user_question(update, user_message)
                context.user_data['stop_loading'] = True
                await loading_thread
                try:
                    await context.bot.delete_message(chat_id=update.effective_chat.id,
                                                     message_id=update.message.message_id + 1)
                except Exception as e:
                    logger.warning(f"Failed to delete loading message: {e}")
                if response:
                    await context.bot.send_message(chat_id=update.effective_chat.id, text=response)
                    context.user_data["ready_to_ask"] = False
                else:
                    await update.message.reply_text(
                        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å —á—É—Ç—å –ø–æ–∑–∂–µ."
                    )
            current_gp = await get_user_data(user_id, 'gp')
            await set_user_data(user_id, 'gp', current_gp - 1)
        else:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GP –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
    else:
        await update.message.reply_text(
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å —É –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å, —Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'! –ò —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ—Ç–≤–µ—á—É –≤–∞–º.")

async def send_typing_animation(update: Update, context: CallbackContext, messages: List[str], delay: int,
                          loop: bool = False):
    index = 0
    chat_id = update.effective_chat.id
    message_id = None

    while not context.user_data.get('stop_loading'):
        try:
            if message_id is None:
                sent_message = await context.bot.send_message(chat_id=chat_id, text=messages[index])
                message_id = sent_message.message_id
            else:
                await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=messages[index])

            await asyncio.sleep(delay)

            index += 1
            if index == len(messages):
                if loop:
                    index = 0
                else:
                    break
        except Exception as e:
            logger.warning(f"Failed to send or edit typing animation: {e}")
            break


async def error(update: Update, context: CallbackContext):
    logger.warning('Update "%s" caused error "%s"', update, context.error)


async def main():
    updater = Updater(TELEGRAM_BOT_TOKEN)

    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.regex('^–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üîç$'), handle_menu))
    dp.add_handler(MessageHandler(Filters.regex('^–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏$'), handle_menu))
    dp.add_handler(MessageHandler(Filters.regex('^Premium-–ø–æ–¥–ø–∏—Å–∫–∞$'), handle_menu))
    dp.add_handler(MessageHandler(Filters.regex('^–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ$'), handle_menu))
    dp.add_handler(MessageHandler(Filters.regex('^–û—Ç—á–∏—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É$'), handle_menu))

    dp.add_handler(CallbackQueryHandler(handle_check_subscription, pattern="^check_subscription$"))
    dp.add_handler(MessageHandler(Filters.text, ask_question))
    dp.add_handler(CallbackQueryHandler(handle_inline_keyboard_button_click))
    dp.add_error_handler(error)
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, ask_question))


    # –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp2, skip_updates=True)
